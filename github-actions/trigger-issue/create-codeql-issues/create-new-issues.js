const fs = require('fs');

// Global variables
let github;
let context;

/**
 * Creates new GitHub issues for each alert that doesn't have an existing issue.
 * @param {Object} options - The options object.
 * @param {string} options.g - The GitHub access token.
 * @param {Object} options.c - The context object.
 * @param {Array<number>} options.alertIds - The array of alert IDs to create issues for.
 * @returns {Promise<void>}
 * @throws {Error} If the POST request fails.
 */
const createNewIssues = async ({ g, c, alertIds }) => {
  // Rename parameters
  github = g;
  context = c;

  // Batch alerts into groups of 5 for each request to avoid rate limit
  const batchedAlertIds = alertIds.reduce((acc, alertId, index) => {
    // For indexes 0 to 4, batchIndex == 0
    // For indexes 5 to 9, batchIndex == 1
    // For indexes 10 to 14, batchIndex == 2
    // Etc.
    const batchIndex = Math.floor(index / 5);
    // if acc[batchIndex] == undefined, a new array is created before pushing the alert number
    acc[batchIndex] = acc[batchIndex] || [];
    // Push alert.number to inner array
    acc[batchIndex].push(alertId);
    // Returns array of arrays
    return acc;
  }, []);

  // Create batch request payload
  const batchRequests = batchedAlertIds.map(alertIdsBatch => ({
    method: 'POST',
    url: `/repos/${context.repo.owner}/${context.repo.repo}/issues/batch`,
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      alerts: alertIdsBatch.map(alertId => ({
        title: `Resolve CodeQL query #${alertId} - generated by GHA`,
        body: fs.readFileSync('github-actions/trigger-issue/create-codeql-issues/issue-body.md', 'utf8').replace(/\${alertId}/g, alertId),
        labels: ['ready for dev lead'],
      })),
    }),
  }));

  // Send batch request
  const batchResponse = await github.request(`POST /repos/${context.repo.owner}/${context.repo.repo}/batch`, {
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      requests: batchRequests,
    }),
  });

  // Throw error if POST request fails
  batchResponse.data.forEach((response, index) => {
    if (response.status !== 201) {
      throw new Error(`Failed to create issue for alert ${alertIds[index]}: ${response.status} - ${response.statusText}`);
    }
    console.log('Issue created for alert', alertIds[index]);
  });
};

module.exports = createNewIssues;
