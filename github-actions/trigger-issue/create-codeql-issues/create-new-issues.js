const fs = require('fs');

// Global variables
let github;
let context;

/**
 * Creates new GitHub issues for each alert that doesn't have an existing issue.
 * @param {Object} options - The options object.
 * @param {string} options.g - The GitHub access token.
 * @param {Object} options.c - The context object.
 * @param {Array<number>} options.alertIds - The array of alert IDs to create issues for.
 * @returns {Promise<void>}
 * @throws {Error} If the POST request fails.
 */
const createNewIssues = async ({ g, c, alertIds }) => {
  // Rename parameters
  github = g;
  context = c;

  // Batch alertIds into groups of 10 for each request
  const batchSize = 10;
  const batches = [];
  for (let i = 0; i < alertIds.length; i += batchSize) {
    batches.push(alertIds.slice(i, i + batchSize));
  }

  // Loop through each batch of alertIds
  for (const batch of batches) {
    // Create the issues array for the batch
    const issues = batch.map(alertId => {
      // Create the issue title
      const issueTitle = `Resolve CodeQL query #${alertId} - generated by GHA`;

      // Read the issue body template file
      const issueBodyTemplatePath = 'github-actions/trigger-issue/create-codeql-issues/issue-body.md';
      let issueBodyTemplate = fs.readFileSync(issueBodyTemplatePath, 'utf8');

      // Replace placeholders with actual values in the issue body template
      issueBodyTemplate = issueBodyTemplate.replace(/\${alertId}/g, alertId);

      // Use the modified content as the issue body
      const issueBody = issueBodyTemplate;

      return {
        title: issueTitle,
        body: issueBody,
        labels: ['ready for dev lead'],
      };
    });

    // Create a new GitHub issue for the batch
    const createIssuesResponse = await github.request(`POST /repos/${context.repo.owner}/${context.repo.repo}/issues`, {
      headers: {
        'Content-Type': 'application/json',
      },
      method: 'POST',
      body: JSON.stringify(issues),
    });

    console.log('createIssuesResponse:', createIssuesResponse);

    // Throw error if POST request fails (201 not created)
    if (createIssuesResponse.status !== 201) {
      throw new Error(`Failed to create issues for batch: ${createIssuesResponse.status} - ${createIssuesResponse.statusText}`);
    }
    console.log('issues created');
  }
};

module.exports = createNewIssues;
