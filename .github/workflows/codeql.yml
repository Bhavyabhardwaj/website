# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "gh-pages" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "gh-pages" ]
  schedule:
    - cron: '30 5 * * 5'

jobs:
  analyze:
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    - name: Check for CodeQL alerts
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          // Get a list of open CodeQL alerts
          const response = await fetch(`https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/code-scanning/alerts?state=active`, {
            headers: {
              Authorization: `token ${{secrets.GITHUB_TOKEN}}`
            }
          });

          if (!response.ok) {
            throw new Error(`Failed to fetch alerts: ${response.status} - ${response.statusText}`);
          }

          const alerts = await response.json();

          // Check if there are any alerts
          if (alerts.length > 0) {
            for (const alert of alerts) {
              const alertId = alert.number;

              // Check if there is an existing tracking issue for the alert
              const searchResponse = await fetch(`https://api.github.com/search/issues?q=repo:${context.repo.owner}/${context.repo.repo}+state:open+${encodeURIComponent(`"${alertId}"`)}+in:title`, {
                headers: {
                  Authorization: `token ${{secrets.GITHUB_TOKEN}}`
                }
              });

              if (!searchResponse.ok) {
                throw new Error(`Failed to search for issues: ${searchResponse.status} - ${searchResponse.statusText}`);
              }

              const searchResult = await searchResponse.json();

              if (searchResult.items.length === 0) {
                const issueTitle = `Resolve CodeQL query #${alertId} - generated by GHA`;

                // Read the template file
                const issueBodyTemplatePath = 'github-actions/trigger-issue/create-codeql-issues/issue-body.md';
                let issueBodyTemplate = fs.readFileSync(issueBodyTemplatePath, 'utf8');

                // Replace placeholders with actual values
                issueBodyTemplate = issueBodyTemplate.replace(/\${alertId}/g, alertId);

                // Use the modified content as the issue body
                const issueBody = issueBodyTemplate;

                // Create a new issue
                const createIssueResponse = await fetch(`https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/issues`, {
                  method: 'POST',
                  headers: {
                    Authorization: `token ${{secrets.GITHUB_TOKEN}}`,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    title: issueTitle,
                    body: issueBody,
                    labels: ['ready for dev lead']
                  })
                });

                /*
                if (!createIssueResponse.ok) {
                  throw new Error(`Failed to create issue for alert ${alertId}: ${createIssueResponse.status} - ${createIssueResponse.statusText}`);
                }
                */
              }
            }
          }

